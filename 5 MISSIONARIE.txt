from collections import deque

# Define initial and goal states
initial_state = (3, 3, 0)
goal_state = (0, 0, 1)

# Define possible moves
moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]

# Check if the state is valid
def is_valid(m_left, c_left, boat):
    m_right = 3 - m_left
    c_right = 3 - c_left
    return (0 <= m_left <= 3 and 0 <= c_left <= 3 and
            (m_left == 0 or m_left >= c_left) and
            (m_right == 0 or m_right >= c_right))

# Get successors of the current state
def get_successors(state):
    m_left, c_left, boat = state
    successors = []
    for m, c in moves:
        if boat == 0:  # Boat on the left side
            new_state = (m_left - m, c_left - c, 1)
        else:  # Boat on the right side
            new_state = (m_left + m, c_left + c, 0)
        if is_valid(*new_state):
            successors.append(new_state)
    return successors

# Perform BFS to find the solution
def bfs(initial_state, goal_state):
    queue = deque([(initial_state, [])])
    visited = set([initial_state])
    
    while queue:
        state, path = queue.popleft()
        
        if state == goal_state:
            return path + [state]
        
        for successor in get_successors(state):
            if successor not in visited:
                visited.add(successor)
                queue.append((successor, path + [state]))
    
    return None

# Solve the problem
solution = bfs(initial_state, goal_state)

# Print the solution
if solution:
    print("Solution found:")
    for state in solution:
        print(state)
else:
    print("No solution found.")
