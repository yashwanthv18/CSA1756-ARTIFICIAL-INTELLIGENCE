import math

# Function to print the board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

# Function to check if there are any moves left
def is_moves_left(board):
    for row in board:
        if "_" in row:
            return True
    return False

# Function to evaluate the board
def evaluate(board):
    # Check rows for winner
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != '_':
            if row[0] == 'X':
                return 10
            elif row[0] == 'O':
                return -10

    # Check columns for winner
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != '_':
            if board[0][col] == 'X':
                return 10
            elif board[0][col] == 'O':
                return -10

    # Check diagonals for winner
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != '_':
        if board[0][0] == 'X':
            return 10
        elif board[0][0] == 'O':
            return -10

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != '_':
        if board[0][2] == 'X':
            return 10
        elif board[0][2] == 'O':
            return -10

    return 0

# Minimax function with Alpha-Beta Pruning
def minimax(board, depth, is_max, alpha, beta):
    score = evaluate(board)

    if score == 10:
        return score - depth
    if score == -10:
        return score + depth
    if not is_moves_left(board):
        return 0

    if is_max:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == "_":
                    board[i][j] = 'X'
                    best = max(best, minimax(board, depth + 1, not is_max, alpha, beta))
                    board[i][j] = "_"
                    alpha = max(alpha, best)
                    if beta <= alpha:
                        break
        return best
    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == "_":
                    board[i][j] = 'O'
                    best = min(best, minimax(board, depth + 1, not is_max, alpha, beta))
                    board[i][j] = "_"
                    beta = min(beta, best)
                    if beta <= alpha:
                        break
        return best

# Function to find the best move
def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == "_":
                board[i][j] = 'X'
                move_val = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = "_"
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move

# Example usage
board = [
    ['X', 'O', 'X'],
    ['O', 'O', 'X'],
    ['_', '_', '_']
]

print("Current board:")
print_board(board)

best_move = find_best_move(board)
print(f"The best move is at position: {best_move}")

output:
Alpha&Beta Pruning Algorithm
[3, 5, 6, 9, 1, 2, -1, 0]
The optimal value is : 5
